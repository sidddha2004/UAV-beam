import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, LSTM, Dropout, Dense
from tensorflow.keras.metrics import CosineSimilarity

# Load the complete dataset (not just target vector)
df = pd.read_csv('uav_regression_dataset_5000.csv')

# Define feature and target columns correctly
feature_cols = [
    'x_uav', 'y_uav', 'z_uav', 'velocity_x', 'velocity_y', 'velocity_z',
    'snr', 'aoa', 'aod', 'wind_speed', 'wind_direction', 'battery_level', 'mission_type'
]

vector_cols = [
    'target_next_x', 'target_next_y', 'target_next_z',
    'target_next_velocity_x', 'target_next_velocity_y', 'target_next_velocity_z',
    'target_optimal_beam_strength', 'target_energy_consumption',
    'target_flight_stability', 'target_communication_quality'
]

# Scale features only (not target vectors)
scaler = MinMaxScaler()
features_scaled = scaler.fit_transform(df[feature_cols])
scaled_df = pd.DataFrame(features_scaled, columns=feature_cols)

# Add target vector columns to the scaled DataFrame (unscaled, assuming they are already in correct range)
for col in vector_cols:
    scaled_df[col] = df[col]

# Create sequences
sequence_length = 7
X_seq, y_seq = [], []

for i in range(len(scaled_df) - sequence_length):
    seq = scaled_df.iloc[i:i+sequence_length][feature_cols].values
    target = scaled_df.iloc[i + sequence_length][vector_cols].values
    X_seq.append(seq)
    y_seq.append(target)

# Convert to arrays
X_seq = np.array(X_seq)
y_seq = np.array(y_seq)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, random_state=42)

# Build LSTM model
model = Sequential([
    Input(shape=(sequence_length, X_seq.shape[2])),
    LSTM(128, return_sequences=True),
    Dropout(0.3),
    LSTM(64),
    Dropout(0.3),
    Dense(len(vector_cols))  # Output neurons = number of target vector components
])

model.compile(
    loss='mean_squared_error',
    optimizer='adam',
    metrics=['mse', CosineSimilarity()]
)
model.summary()

# Train the model
history = model.fit(
    X_train, y_train,
    epochs=20,
    batch_size=8,
    validation_data=(X_test, y_test)
)

# Plot training history
plt.figure(figsize=(12, 5))

# MSE Plot
plt.subplot(1, 2, 1)
plt.plot(history.history['mse'], label='Train MSE', marker='o')
plt.plot(history.history['val_mse'], label='Val MSE', marker='o')
plt.title('MSE over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Mean Squared Error')
plt.legend()
plt.grid(True)

# Loss Plot
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss', marker='o')
plt.plot(history.history['val_loss'], label='Val Loss', marker='o')
plt.title('Loss over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
